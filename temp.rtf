{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red34\green139\blue34;\red160\green32\blue240;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs20 \cf2 function\cf0  [imShift, predShift] = alignChannels(im, maxShift)
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 % ALIGNCHANNELS align channels in an image.
\fs24 \cf0 \

\fs20 \cf3 %   [IMSHIFT, PREDSHIFT] = ALIGNCHANNELS(IM, MAXSHIFT) aligns the channels in an
\fs24 \cf0 \

\fs20 \cf3 %   NxMx3 image IM. The first channel is fixed and the remaining channels
\fs24 \cf0 \

\fs20 \cf3 %   are aligned to it within the maximum displacement range of MAXSHIFT (in
\fs24 \cf0 \

\fs20 \cf3 %   both directions). The code returns the aligned image IMSHIFT after
\fs24 \cf0 \

\fs20 \cf3 %   performing this alignment. The optimal shifts are returned as in
\fs24 \cf0 \

\fs20 \cf3 %   PREDSHIFT a 2x2 array. PREDSHIFT(1,:) is the shifts  in I (the first) 
\fs24 \cf0 \

\fs20 \cf3 %   and J (the second) dimension of the second channel, and PREDSHIFT(2,:)
\fs24 \cf0 \

\fs20 \cf3 %   are the same for the third channel.
\fs24 \cf0 \

\fs20 \cf3 %
\fs24 \cf0 \

\fs20 \cf3 % This code is part of:
\fs24 \cf0 \

\fs20 \cf3 %
\fs24 \cf0 \

\fs20 \cf3 %   CMPSCI 670: Computer Vision, Fall 2016
\fs24 \cf0 \

\fs20 \cf3 %   University of Massachusetts, Amherst
\fs24 \cf0 \

\fs20 \cf3 %   Instructor: Subhransu Maji
\fs24 \cf0 \

\fs20 \cf3 %
\fs24 \cf0 \

\fs20 \cf3 %   Homework 1: Color images
\fs24 \cf0 \

\fs20 \cf3 %   Author: Subhransu Maji
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \

\fs20 \cf3 % Sanity check
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 assert(size(im,3) == 3);
\fs24 \

\fs20 assert(all(maxShift > 0));
\fs24 \

\fs20  
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 % Dummy implementation (replace this with your own)
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 predShift = zeros(2, 2);
\fs24 \

\fs20  
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %figure(1);
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 first_channel = im(:,:,1);
\fs24 \

\fs20 second_channel = im(:,:,2);
\fs24 \

\fs20 third_channel = im(:,:,3);
\fs24 \

\fs20  
\fs24 \

\fs20 fc_edge = edge(first_channel,\cf4 'canny'\cf0 );
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %subplot(1,3,1);
\fs24 \cf0 \

\fs20 \cf3 %imagesc(fc_edge);
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 sc_edge = edge(second_channel,\cf4 'canny'\cf0 );
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %subplot(1,3,2);
\fs24 \cf0 \

\fs20 \cf3 %imagesc(sc_edge);
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 tc_edge = edge(third_channel,\cf4 'Canny'\cf0 );
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %subplot(1,3,3);
\fs24 \cf0 \

\fs20 \cf3 %imagesc(tc_edge);
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \

\fs20 \cf3 %\{min_diff = 0;
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 hshift = -100;
\fs24 \

\fs20 vshift = -100;
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 for\cf0  i = -15:15
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     \cf2 for\cf0  j = -15:15
\fs24 \

\fs20         \cf3 %temp_image = circshift(second_channel, [i, j]);
\fs24 \cf0 \

\fs20         \cf3 %temp_image = circshift(sc_edge, [i, j]);
\fs24 \cf0 \

\fs20         \cf3 %temp = sum(sum((first_channel-temp_image).^2));
\fs24 \cf0 \

\fs20         \cf3 %temp = sum(sum((fc_edge-temp_image).^2));
\fs24 \cf0 \

\fs20         
\fs24 \

\fs20         temp = sum(sum(fc_edge & sc_edge));
\fs24 \

\fs20         
\fs24 \

\fs20         \cf2 if\cf0  temp > min_diff
\fs24 \

\fs20             min_diff = temp;
\fs24 \

\fs20             hshift = i;
\fs24 \

\fs20             vshift = j;
\fs24 \

\fs20         \cf2 end
\fs24 \cf0 \

\fs20     \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 predShift(1,1) = hshift;
\fs24 \

\fs20 predShift(1,2) = vshift;\cf3 %\}
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 min_diff = 0;
\fs24 \

\fs20 hshift = -100;
\fs24 \

\fs20 vshift = -100;
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 for\cf0  i = -15:15
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     \cf2 for\cf0  j = -15:15
\fs24 \

\fs20         \cf3 %temp_image = circshift(second_channel, [i, j]);
\fs24 \cf0 \

\fs20         \cf3 %temp_image = circshift(tc_edge, [i, j]);
\fs24 \cf0 \

\fs20         \cf3 %temp = sum(sum((first_channel-temp_image).^2));
\fs24 \cf0 \

\fs20         \cf3 %temp = sum(sum((fc_edge-temp_image).^2));
\fs24 \cf0 \

\fs20         
\fs24 \

\fs20         temp = sum(sum(fc_edge & sc_edge)); 
\fs24 \

\fs20         
\fs24 \

\fs20         \cf2 if\cf0  temp > min_diff
\fs24 \

\fs20             min_diff = temp;
\fs24 \

\fs20             hshift = i;
\fs24 \

\fs20             vshift = j;
\fs24 \

\fs20         \cf2 end
\fs24 \cf0 \

\fs20     \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 predShift(2,1) = hshift;
\fs24 \

\fs20 predShift(2,2) = vshift;
\fs24 \

\fs20  
\fs24 \

\fs20  
\fs24 \

\fs20 c = normxcorr2(first_channel,second_channel);
\fs24 \

\fs20 figure, surf(c), shading \cf4 flat
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf4  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 [max_c, imax] = max(abs(c(:)));
\fs24 \

\fs20 [ypeak, xpeak] = ind2sub(size(c),imax(1));
\fs24 \

\fs20 corr_offset = [(xpeak-size(first_channel,2))
\fs24 \

\fs20                (ypeak-size(first_channel,1))];
\fs24 \

\fs20  
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 % relative offset of position of subimages
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 rect_offset = [(second_channel(1)-first_channel(1))
\fs24 \

\fs20                (second_channel(2)-first_channel(2))];
\fs24 \

\fs20  
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 % total offset
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 offset = corr_offset + rect_offset;
\fs24 \

\fs20 xoffset = offset(1)
\fs24 \

\fs20 yoffset = offset(2)
\fs24 \

\fs20 pause(10);
\fs24 \

\fs20  
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %imshow(im);
\fs24 \cf0 \

\fs20 \cf3 %pause(10)
\fs24 \cf0 \

\fs20 \cf3 %disp('results');
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 predShift
\fs24 \

\fs20  
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %pause(5);
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0           
\fs24 \

\fs20  
\fs24 \

\fs20 imShift = im;
\fs24 \
}