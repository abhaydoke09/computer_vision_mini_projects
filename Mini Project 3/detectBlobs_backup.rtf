{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red34\green139\blue34;\red160\green32\blue240;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs20 \cf2 function\cf0  blobs = detectBlobs(im, param)
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 % This code is part of:
\fs24 \cf0 \

\fs20 \cf3 %
\fs24 \cf0 \

\fs20 \cf3 %   CMPSCI 670: Computer Vision, Fall 2016
\fs24 \cf0 \

\fs20 \cf3 %   University of Massachusetts, Amherst
\fs24 \cf0 \

\fs20 \cf3 %   Instructor: Subhransu Maji
\fs24 \cf0 \

\fs20 \cf3 %
\fs24 \cf0 \

\fs20 \cf3 %   Mini project 3
\fs24 \cf0 \

\fs20 \cf3  
\fs24 \cf0 \

\fs20 \cf3 % Input:
\fs24 \cf0 \

\fs20 \cf3 %   IM - input image
\fs24 \cf0 \

\fs20 \cf3 %
\fs24 \cf0 \

\fs20 \cf3 % Ouput:
\fs24 \cf0 \

\fs20 \cf3 %   BLOBS - n x 4 array with blob in each row in (x, y, radius, score)
\fs24 \cf0 \

\fs20 \cf3 %
\fs24 \cf0 \

\fs20 \cf3 % Dummy - returns a blob at the center of the image
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 im = im2double(rgb2gray(im));
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 % sig = 2;
\fs24 \cf0 \

\fs20 \cf3 % k = 1.44;
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 sig = 1.2;
\fs24 \

\fs20 k = 1.1;
\fs24 \

\fs20 n = 15;
\fs24 \

\fs20 [h,w] = size(im);
\fs24 \

\fs20 pyramid = zeros(h,w,n);
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 for\cf0  i=1:n
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     sigi = sig * k^(i-1)*sqrt(2);
\fs24 \

\fs20     \cf3 %sigi = sig^(k+(i-1)*0.1);
\fs24 \cf0 \

\fs20     filter1 = fspecial(\cf4 'Gaussian'\cf0 , 2*ceil(sigi*3)+1, sigi);
\fs24 \

\fs20     laplacianImage =  (im - imfilter(im, filter1, \cf4 'replicate'\cf0 ));
\fs24 \

\fs20     
\fs24 \

\fs20     pyramid(:,:,i) = laplacianImage; 
\fs24 \

\fs20     imagesc(pyramid(:,:,i));
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 scale_pyramid = zeros(h, w, n);
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 for\cf0  i = 1:n
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     scale_pyramid(:,:,i) = ordfilt2(pyramid(:,:,i), 3^2, ones(3));
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \

\fs20 \cf2 for\cf0  i = 1:n
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     scale_pyramid(:,:,i) = max(scale_pyramid(:,:,max(i-1,1):min(i+1,n)),[],3);
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 scale_pyramid = scale_pyramid .* (scale_pyramid == pyramid);
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %imagesc(scale_pyramid(:,:,2));
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 non_zero = sum(sum(sum(scale_pyramid(:,:,1)~=0)))
\fs24 \

\fs20 non_zero = sum(sum(sum(scale_pyramid(:,:,2)~=0)))
\fs24 \

\fs20 non_zero = sum(sum(sum(scale_pyramid(:,:,3)~=0)))
\fs24 \

\fs20 non_zero = sum(sum(sum(scale_pyramid(:,:,4)~=0)))
\fs24 \

\fs20 non_zero = sum(sum(sum(scale_pyramid(:,:,5)~=0)))
\fs24 \

\fs20  
\fs24 \

\fs20 scale_pyramid(:,:,3);
\fs24 \

\fs20  
\fs24 \

\fs20 blobs = zeros(20000,4);
\fs24 \

\fs20 point_counter = 1;
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 for\cf0  i = 1:n
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     [row,cols] = find(scale_pyramid(:,:,i)>0.001);
\fs24 \

\fs20     number_of_points = length(row);
\fs24 \

\fs20     \cf2 for\cf0  j = 1:number_of_points
\fs24 \

\fs20         blobs(point_counter,1) = cols(j);
\fs24 \

\fs20         blobs(point_counter,2) = row(j);
\fs24 \

\fs20         blobs(point_counter,3) = sig * k^(i-1)*sqrt(2);
\fs24 \

\fs20         \cf3 %blobs(point_counter,3) = sig^(k+(i-1)*0.1) * sqrt(2);
\fs24 \cf0 \

\fs20         blobs(point_counter,4) = scale_pyramid(row(j),cols(j));
\fs24 \

\fs20         point_counter = point_counter + 1;
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %         if point_counter>10000
\fs24 \cf0 \

\fs20 \cf3 %             break
\fs24 \cf0 \

\fs20 \cf3 %         end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %     if point_counter>10000
\fs24 \cf0 \

\fs20 \cf3 %             break
\fs24 \cf0 \

\fs20 \cf3 %     end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 size(blobs)
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf3 %blobs = round([size(im,2)*0.5 size(im,1)*0.5 0.25*min(size(im,1), size(im,2)) 1]);
\fs24 \cf0 \
}